{"version":3,"sources":["Components/logo.svg","Components/Navbar.js","firestore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Search","input","SubMenu","menu","MenuItemGroup","ItemGroup","Navbar","state","visible","showDrawer","_this","setState","onClose","Menus","react_default","a","createElement","className","mode","defaultSelectedKeys","Item","style","marginRight","src","Logo","alt","title","icon","type","key","disabled","placeholder","onSearch","value","console","log","width","float","this","onClick","drawer","placement","closable","Component","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","Header","Content","Footer","App","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addingTodo","pendingTodo","todos","addTodo","bind","assertThisInitialized","completeTodo","collection","onSnapshot","snapshot","forEach","doc","todo","data","id","completed","push","sort","b","Date","createdAt","getTime","set","add","content","toISOString","_this2","layout","Components_Navbar","ref","size","onChange","evt","target","onPressEnter","es_button","loading","list","bordered","dataSource","renderItem","textAlign","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a78e7eaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ea69d71e.svg\";","import { Menu, Icon, Input,  Drawer } from 'antd';\nimport React, { Component } from 'react';\nimport Logo from './logo.svg'\n\n\nconst Search = Input.Search;\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nclass Navbar extends Component {\n  state = {\n    visible: false\n  }\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n      \n  render() {\n      const Menus=(\n        <Menu\n        className=\"App-menu\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['3']}\n      >\n  <Menu.Item>        \n  <span style={{marginRight: '10'}}> <img src={Logo} alt=\"Logo\"/></span>\n  </Menu.Item>\n  <SubMenu title={<span className=\"submenu-title-wrapper\">Product  \n  <Icon type=\"down\"></Icon></span>}>\n\n    <MenuItemGroup title=\"Item 1\">\n      <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\n      <Menu.Item key=\"setting:2\">Option 2</Menu.Item>\n    </MenuItemGroup>\n    <MenuItemGroup title=\"Item 2\">\n      <Menu.Item key=\"setting:3\">Option 3</Menu.Item>\n      <Menu.Item key=\"setting:4\">Option 4</Menu.Item>\n    </MenuItemGroup>\n  </SubMenu>\n  <Menu.Item disabled>\n  <span>\n  <Search\n      placeholder=\"input search text\"\n      onSearch={value => console.log(value)}\n      style={{ width: 200 }}\n    />\n    </span>\n    </Menu.Item>\n        <Menu.Item key=\"2\"\n        style={{ float: 'right'\n        }}\n        >\n        nav 2\n        </Menu.Item>\n        <Menu.Item key=\"3\"\n        style={{ float: 'right'\n        }}>\n        nav 3</Menu.Item>\n\n      </Menu>\n      );\n    return (\n        <div>\n            {Menus}\n            <span>\n                \n                <Icon className=\"buttonresp\"\n                 type={this.state.visible ? 'menu-unfold' : 'menu-fold'}\n                  onClick={this.showDrawer} />\n              </span>\n\n\n          <Drawer\n\t\t          title=\"Basic Drawer\"\n\t\t          placement=\"right\"\n\t\t          closable={false}\n\t\t          onClose={this.onClose}\n              visible={this.state.visible}\n              defaultSelectedKeys={['3']}\n\t\t        >\n\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n\n\n\t\t        </Drawer>\n            </div>\n    );\n  }\n}\n\nexport default Navbar","import firebase from \"@firebase/app\";\nimport \"@firebase/firestore\";\n\nconst config = {\n  apiKey: \"AIzaSyALx-Yckr6ar-GK8slZC-Q4lF2JLAhSpxo\",\n  authDomain: \"first-react-app-dc2c2.firebaseapp.com\",\n  databaseURL: \"https://first-react-app-dc2c2.firebaseio.com/\",\n  projectId: \"first-react-app-dc2c2\",\n  storageBucket: \"gs://first-react-app-dc2c2.appspot.com\",\n  messagingSenderId: \"<messageingSenderId>\"\n};\n\nconst app = firebase.initializeApp(config);\nconst firestore = firebase.firestore(app);\n\nexport default firestore;","import React, { Component } from 'react';\nimport { Layout, Input, Button, List, Icon} from 'antd';\nimport Navbar from './Components/Navbar'\nimport firestore from \"./firestore\";\nimport './App.css';\nconst { Header, Content, Footer} = Layout;\n  class App extends Component {\n    constructor(props) {\n      super(props);\n      // Set the default state of our application\n      this.state = { addingTodo: false, pendingTodo: \"\", todos: [] };\n      // We want event handlers to share this context\n      this.addTodo = this.addTodo.bind(this);\n      this.completeTodo = this.completeTodo.bind(this);\n      // We listen for live changes to our todos collection in Firebase\n      firestore.collection(\"todos\").onSnapshot(snapshot => {\n        let todos = [];\n        snapshot.forEach(doc => {\n          const todo = doc.data();\n          todo.id = doc.id;\n          if (!todo.completed) todos.push(todo);\n        });\n        // Sort our todos based on time added\n        todos.sort(function(a, b) {\n          return (\n            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n          );\n        });\n        // Anytime the state of our database changes, we update state\n        this.setState({ todos });\n      });\n    }\n  \n    async completeTodo(id) {\n      // Mark the todo as completed\n      await firestore\n        .collection(\"todos\")\n        .doc(id)\n        .set({\n          completed: true\n        });\n    }\n  \n    async addTodo() {\n      if (!this.state.pendingTodo) return;\n      // Set a flag to indicate loading\n      this.setState({ addingTodo: true });\n      // Add a new todo from the value of the input\n      await firestore.collection(\"todos\").add({\n        content: this.state.pendingTodo,\n        completed: false,\n        createdAt: new Date().toISOString()\n      });\n      // Remove the loading flag and clear the input\n      this.setState({ addingTodo: false, pendingTodo: \"\" });\n    }\n  \n    render() {\n      return (\n        <div>\n  <Layout className=\"layout\">\n     \n     <Header className=\"App-header\">\n          <div className=\"navigation\">\n\n                <Navbar />\n          </div>\n          </Header>\n          <Content className=\"App-content\">\n          <Input\n            ref=\"add-todo-input\"\n            className=\"App-add-todo-input\"\n            size=\"large\"\n            placeholder=\"What needs to be done?\"\n            disabled={this.state.addingTodo}\n            onChange={evt => this.setState({ pendingTodo: evt.target.value })}\n            value={this.state.pendingTodo}\n            onPressEnter={this.addTodo}\n          />\n          <Button\n            className=\"App-add-todo-button\"\n            size=\"large\"\n            type=\"primary\"\n            onClick={this.addTodo}\n            loading={this.state.addingTodo}\n          >\n            Add Todo\n          </Button>\n          <List\n            className=\"App-todos\"\n            size=\"large\"\n            bordered\n            dataSource={this.state.todos}\n            renderItem={todo => (\n              <List.Item>\n                {todo.content}\n                <Icon\n                  onClick={evt => this.completeTodo(todo.id)}\n                  className=\"App-todo-complete\"\n                  type=\"check\"\n                />\n              </List.Item>\n            )}\n          />\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Ant Design ©2018 Created by Ant UED\n          </Footer>\n          </Layout>\n        </div>\n      );\n    }\n  }\n\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}